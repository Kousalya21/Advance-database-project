
Name: Yash Bardapurkar
Last 4 digits ID: 1650
Computer IP address:
CSE 6331, Cloud Computing					


Quiz Q2, 3.30, Summer 2019   (c) DL, UTA, 2019


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     YB
     _________________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4. Using the cloud services provider, all functionality possible should be implemented on that provider.
    (Of course, displaying web pages through a browser and the user interface is "local")
    The cloud service provider is IBM Cloud (BlueMix).
  
Show and submit code, when each part is complete, raise your hand and then show us:

 5. Show a web page and interface (which resides on the cloud provider) with your student ID followed by your
    last name then comma then first name (as it appears on your student ID), in large font at the top of every web page displayed 
    (for this quiz)
    Upload the earthquake data ("quakes") to cloud service, and import into a relational DB (SQL).
    Then, below your name and ID, show the total number of earthquakes ("quakes") in the data set, 
    and give the largest one ("mag") and its location (the name, the "place" location).  

 6. Through a web interface (page), allow a user to give two magnitude values (for example 3.0 and 5.0) and show the
    number of quakes between those values in 0.1 increments (that is 3.0 to 3.1, 3.1 to 3.2, 3.2 to 3.3, up to 4.9 to 5.0;
    show the number of quakes in EACH interval).

Hello.py
@app.route('/prob6', methods=["POST"])
def problem_6():
    start_magnitude = float(request.form["start_magnitude"])
    end_magnitude = float(request.form["end_magnitude"])

    if (start_magnitude > end_magnitude):
        return "start magnitude greater than end magnitude"

    mag = start_magnitude
    ret = {}
    while mag < end_magnitude:
        lst = connect.mag_in_ranges(mag, mag + 0.1)
        ret["Magnitude " + str(mag) + " to " + str(mag + 0.1) + ", " + str(len(lst)) + " earthquakes"] = lst
        mag = mag + 0.1

    return render_template('prob6.html', result=ret)

connect.py
def mag_in_ranges(start_magnitude, end_magnitude):
    sql = "SELECT * from quakes where mag between ? and ?;"
    stmt = ibm_db.prepare(connection, sql)
    ibm_db.bind_param(stmt, 1, start_magnitude)
    ibm_db.bind_param(stmt, 2, end_magnitude)
    result = ibm_db.execute(stmt)

    ret = [];
    result_dict = ibm_db.fetch_assoc(stmt)
    while result_dict is not False:
        ret.append(result_dict)
        result_dict = ibm_db.fetch_assoc(stmt)

    return ret

html
{% for key, list in result.items() %}
    <h2> {{ key }} </h2>
    <table>
        <tr>
            <th>Time</th>
            <th>Magnitude</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Depth</th>
            <th>RMS</th>
            <th>Place</th>
        </tr>

        {% for row in list %}
        <tr>
            <td> {{ row["TIME"] }} </td>
            <td> {{ row["MAG"] }} </td>
            <td> {{ row["LATITUDE"] }} </td>
            <td> {{ row["LONGITUDE"] }} </td>
            <td> {{ row["DEPTH"] }} </td>
            <td> {{ row["RMS"] }} </td>
            <td> {{ row["PLACE"] }} </td>
        </tr>
        {% endfor %}
    </table>
{% endfor %}


 7. Through a web interface (page), allow a user to give two location values (lat and long for two different locations) 
    and show (list) the lat, long, and place (name), for every earthquake in that area (box).

hello.py
@app.route('/prob7', methods=["POST"])
def problem_7():
    start_latitude = float(request.form["start_latitude"])
    start_longitude = float(request.form["start_longitude"])

    end_latitude = float(request.form["end_latitude"])
    end_longitude = float(request.form["end_longitude"])

    if (start_latitude > 90 or start_latitude < -90):
        return "start latitude out of bounds"
    if (end_latitude > 90 or end_latitude < -90):
        return "end latitude out of bounds"
    if (start_longitude > 180 or start_longitude < -180):
        return "start latitude out of bounds"
    if (end_longitude > 180 or end_longitude < -180):
        return "start latitude out of bounds"

    if (start_latitude < end_latitude):
        return "start latitude should be higher than end latitude"
    if (start_longitude > end_longitude):
        return "start longitude should be lower than end longitude"

    ret = connect.quakes_in_coordinates(start_latitude, start_longitude, end_latitude, end_longitude)
    print((start_latitude, start_longitude, end_latitude, end_longitude))
    print(ret)
    
    return render_template('prob7.html', result=ret)

connect.py
def quakes_in_coordinates(start_latitude, start_longitude, end_latitude, end_longitude):
    sql = "SELECT * from quakes where latitude between ? and ? and longitude between ? and ?"
    stmt = ibm_db.prepare(connection, sql)
    ibm_db.bind_param(stmt, 1, float(end_latitude))
    ibm_db.bind_param(stmt, 2, float(start_latitude))
    ibm_db.bind_param(stmt, 3, float(start_longitude))
    ibm_db.bind_param(stmt, 4, float(end_longitude))
    result = ibm_db.execute(stmt)

    ret = [];
    result_dict = ibm_db.fetch_assoc(stmt)
    while result_dict is not False:
        ret.append(result_dict)
        result_dict = ibm_db.fetch_assoc(stmt)

    return ret

html
<table>
    <tr>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Place</th>
    </tr>

    {% for row in result %}
    <tr>
        <td> {{ row["LATITUDE"] }} </td>
        <td> {{ row["LONGITUDE"] }} </td>
        <td> {{ row["PLACE"] }} </td>
    </tr>
    {% endfor %}
</table>


 8. Through a web interface (page), allow a user to give a date (one, single, day) in Z (GMT) and a mag range, 
    and remove all earthquakes (remove all data) within that range. 
    Then show number of tuples (records) removed, and number remaining.

hello.py
@app.route('/prob8', methods=["POST"])
def problem_8():
    start_magnitude = request.form["start_magnitude"]
    end_magnitude = request.form["end_magnitude"]

    if (start_magnitude > end_magnitude):
        return "start magnitude greater than end magnitude"

    date = datetime.datetime.strptime(request.form["day"], "%Y-%m-%d").replace(hour=0, minute=0, second=0, microsecond=0)

    before_count = connect.total_count()
    connect.delete_rows(date.day, start_magnitude, end_magnitude)
    after_count = connect.total_count()

    ret = "records deleted: " + str(before_count - after_count) + ", records remaining: " + str(after_count)

    return render_template('prob8.html', result=ret)


connect.py
def total_count():
    sql = "SELECT count(*) from quakes"
    stmt = ibm_db.prepare(connection, sql)
    ibm_db.execute(stmt)
    return int(ibm_db.fetch_assoc(stmt)["1"])
    
def delete_rows(day, start_magnitude, end_magnitude):
    sql = "DELETE FROM quakes WHERE day(REPLACE(REPLACE(TIME, 'Z', ' '), 'T', ' ')) = ? and mag between ? and ?"
    stmt = ibm_db.prepare(connection, sql)
    ibm_db.bind_param(stmt, 1, day)
    ibm_db.bind_param(stmt, 2, start_magnitude)
    ibm_db.bind_param(stmt, 3, end_magnitude)

    ibm_db.execute(stmt)
    return ibm_db.num_rows(stmt)



 9. Through a web interface (page), allow a user to give a state name (a part of the string in "place", for example "CA")
    a location in lat, long, and a distance (in degrees) value (for example, "CA", 34, -117.5, 2) and show all earthquakes
    in that lat, long, within that state, in an area plus or minus that number of degrees in lat or long, for the example,
    all earthquakes in "CA" that are within 2 degrees of 34, -117.5  

 10. Show GTA parts 5, 6, 7, 8, 9

 11. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

